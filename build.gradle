
defaultTasks('task1', 'hello', 'checksum')
allprojects {
    repositories {
        maven {
            url "http://192.168.1.11:8081/artifactory/libs-release/"
        }
    }
    afterEvaluate { project ->
        if (project.hasExample) {
            // println "Adding example task to $project"
            project.task('example') << {
                println "Running example for $project"
            }
        }
    }
}

// gradle.afterProject {project, projectState ->
//     if (projectState.failure) {
//         println "Evaluation of $project FAILED $projectState"
//     } else {
//         println "Evaluation of $project succeeded $projectState"
//     }
// }

task hello {
    doLast {
        println 'hello'
    }
}

hello << {
    println "hello end1"
}
hello << {
    println "hello end2"
}
hello << {
    println "hello end3"
}
hello.doFirst {
    println "hello doFirst"
}

task hello1 << {
    println 'Hello world!'
}

task upper << {
    String someString = 'my_name'
    println "orignal:" + someString
    println "upper case:" + someString.toUpperCase()
}

task count << {
    4.times {print "$it "}
}

task intro(dependsOn: hello) << {
    println("intro")
}

4.times {  counter ->
    task "task$counter" << {
        println "i'm task $counter"
    }

}

task1.dependsOn task2, task3
task1.dependsOn(task3)



task myTask {
    ext.myProperty = "myValue"
}
task printTaskProperty << {
    println myTask.myProperty
}


File[] fileList(String dir){
    file(dir).listFiles({file->file.isFile()} as FileFilter).sort()
}
task checksum << {
    fileList('.').each {File file ->
        ant.checksum(file: file, property: "cs_$file.name")
        println "$file.name Checksum: ${ant.properties["cs_$file.name"]}"
    }
}

task loadfile << {
    def files = file(".").listFiles().sort()
    files.each { File file ->
        if (file.isFile()){
            ant.loadfile(srcFile: file, property: file.name)
            println "** $file.name ***"
            println "${ant.properties[file.name]}"
        }
    }
}

// println 'This is executed during the configuration phase.'

task configured {
    // println 'This is also executed during the configuration phase.'
}

task test << {
    println 'This is executed during the execution phase.'
}

task testBoth {
    doFirst {
      println 'This is executed first during the execution phase.'
    }
    doLast {
      println 'This is executed last during the execution phase.'
    }
    // println 'This is executed during the configuration phase as well.'
}

// println "source dir is $test.ext"

task distribution << {
    println "We build the zip with version=$version"
}

task release(dependsOn: 'distribution') << {
    println 'We release now'
}

// println version
gradle.taskGraph.whenReady {taskGraph ->
    if (taskGraph.hasTask(release)) {
        version = '1.0'
    } else {
        version = '1.0-SNAPSHOT'
    }
}
